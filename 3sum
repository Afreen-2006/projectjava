class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        nums.sort()  # Sort the array to efficiently use the two-pointer technique

        for i in range(len(nums) - 2):
            # Skip duplicate elements for 'i' to avoid duplicate triplets
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            l, r = i + 1, len(nums) - 1  # Initialize two pointers

            while l < r:
                s = nums[i] + nums[l] + nums[r]

                if s < 0:
                    l += 1  # If sum is too small, increment left pointer
                elif s > 0:
                    r -= 1  # If sum is too large, decrement right pointer
                else:
                    # Found a triplet that sums to zero
                    res.append([nums[i], nums[l], nums[r]])
                    # Skip duplicate elements for 'l' and 'r'
                    while l < r and nums[l] == nums[l + 1]:
                        l += 1
                    while l < r and nums[r] == nums[r - 1]:
                        r -= 1
                    l += 1  # Move pointers to find other triplets
                    r -= 1
        return res
